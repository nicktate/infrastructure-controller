// Code generated by mockery v1.0.0. DO NOT EDIT.

package provision

import mock "github.com/stretchr/testify/mock"

import types "github.com/containership/csctl/cloud/provision/types"

// NodePoolInterface is an autogenerated mock type for the NodePoolInterface type
type NodePoolInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: req
func (_m *NodePoolInterface) Create(req *types.NodePoolDigitalOceanCreateRequest) (*types.NodePool, error) {
	ret := _m.Called(req)

	var r0 *types.NodePool
	if rf, ok := ret.Get(0).(func(*types.NodePoolDigitalOceanCreateRequest) *types.NodePool); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.NodePool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*types.NodePoolDigitalOceanCreateRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *NodePoolInterface) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *NodePoolInterface) Get(id string) (*types.NodePool, error) {
	ret := _m.Called(id)

	var r0 *types.NodePool
	if rf, ok := ret.Get(0).(func(string) *types.NodePool); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.NodePool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *NodePoolInterface) List() ([]types.NodePool, error) {
	ret := _m.Called()

	var r0 []types.NodePool
	if rf, ok := ret.Get(0).(func() []types.NodePool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.NodePool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Scale provides a mock function with given fields: id, req
func (_m *NodePoolInterface) Scale(id string, req *types.NodePoolScaleRequest) (*types.NodePool, error) {
	ret := _m.Called(id, req)

	var r0 *types.NodePool
	if rf, ok := ret.Get(0).(func(string, *types.NodePoolScaleRequest) *types.NodePool); ok {
		r0 = rf(id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.NodePool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *types.NodePoolScaleRequest) error); ok {
		r1 = rf(id, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upgrade provides a mock function with given fields: id, req
func (_m *NodePoolInterface) Upgrade(id string, req *types.NodePoolUpgradeRequest) (*types.NodePool, error) {
	ret := _m.Called(id, req)

	var r0 *types.NodePool
	if rf, ok := ret.Get(0).(func(string, *types.NodePoolUpgradeRequest) *types.NodePool); ok {
		r0 = rf(id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.NodePool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *types.NodePoolUpgradeRequest) error); ok {
		r1 = rf(id, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
